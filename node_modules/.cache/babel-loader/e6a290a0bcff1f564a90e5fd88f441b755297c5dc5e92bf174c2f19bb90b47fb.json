{"ast":null,"code":"var _jsxFileName = \"/workspaces/stratscale-fixed/src/components/AnimatedBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let shapes = [];\n    let waves = [];\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    class GeometricShape {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 60 + 20;\n        this.rotation = Math.random() * Math.PI * 2;\n        this.rotationSpeed = (Math.random() - 0.5) * 0.005;\n        this.speedX = (Math.random() - 0.5) * 0.3;\n        this.speedY = (Math.random() - 0.5) * 0.3;\n        this.opacity = Math.random() * 0.15 + 0.05;\n        this.type = Math.floor(Math.random() * 3);\n        this.pulsePhase = Math.random() * Math.PI * 2;\n        this.pulseSpeed = 0.01;\n        this.color = Math.random() > 0.5 ? '154, 124, 64' : '33, 54, 81';\n      }\n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n        this.rotation += this.rotationSpeed;\n        this.pulsePhase += this.pulseSpeed;\n        if (this.x > canvas.width + this.size) this.x = -this.size;\n        if (this.x < -this.size) this.x = canvas.width + this.size;\n        if (this.y > canvas.height + this.size) this.y = -this.size;\n        if (this.y < -this.size) this.y = canvas.height + this.size;\n      }\n      draw() {\n        ctx.save();\n        ctx.translate(this.x, this.y);\n        ctx.rotate(this.rotation);\n        const pulseFactor = 1 + Math.sin(this.pulsePhase) * 0.1;\n        const currentSize = this.size * pulseFactor;\n        ctx.fillStyle = `rgba(${this.color}, ${this.opacity})`;\n        ctx.strokeStyle = `rgba(255, 255, 255, ${this.opacity * 0.3})`;\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        switch (this.type) {\n          case 0:\n            ctx.moveTo(0, -currentSize / 2);\n            ctx.lineTo(-currentSize / 2, currentSize / 2);\n            ctx.lineTo(currentSize / 2, currentSize / 2);\n            ctx.closePath();\n            break;\n          case 1:\n            ctx.rect(-currentSize / 2, -currentSize / 2, currentSize, currentSize);\n            break;\n          case 2:\n            const sides = 6;\n            const step = Math.PI * 2 / sides;\n            ctx.moveTo(currentSize / 2, 0);\n            for (let i = 1; i <= sides; i++) {\n              ctx.lineTo(currentSize / 2 * Math.cos(i * step), currentSize / 2 * Math.sin(i * step));\n            }\n            ctx.closePath();\n            break;\n        }\n        ctx.fill();\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n    class Wave {\n      constructor(y, amplitude, frequency, speed, color) {\n        this.baseY = y;\n        this.amplitude = amplitude;\n        this.frequency = frequency;\n        this.speed = speed;\n        this.color = color;\n        this.offset = 0;\n      }\n      update() {\n        this.offset += this.speed;\n      }\n      draw() {\n        ctx.beginPath();\n        ctx.moveTo(0, canvas.height);\n        for (let x = 0; x <= canvas.width; x += 5) {\n          const y = this.baseY + Math.sin(x * this.frequency + this.offset) * this.amplitude;\n          ctx.lineTo(x, y);\n        }\n        ctx.lineTo(canvas.width, canvas.height);\n        ctx.closePath();\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n        gradient.addColorStop(0, this.color);\n        gradient.addColorStop(1, 'rgba(33, 54, 81, 0)');\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n    }\n    class GridLines {\n      constructor() {\n        this.spacing = 100;\n        this.opacity = 0.03;\n        this.offset = 0;\n        this.speed = 0.2;\n      }\n      update() {\n        this.offset += this.speed;\n        if (this.offset >= this.spacing) this.offset = 0;\n      }\n      draw() {\n        ctx.strokeStyle = `rgba(154, 124, 64, ${this.opacity})`;\n        ctx.lineWidth = 0.5;\n        for (let x = -this.offset; x <= canvas.width + this.spacing; x += this.spacing) {\n          ctx.beginPath();\n          ctx.moveTo(x, 0);\n          ctx.lineTo(x, canvas.height);\n          ctx.stroke();\n        }\n        for (let y = -this.offset; y <= canvas.height + this.spacing; y += this.spacing) {\n          ctx.beginPath();\n          ctx.moveTo(0, y);\n          ctx.lineTo(canvas.width, y);\n          ctx.stroke();\n        }\n      }\n    }\n    const createShapes = () => {\n      shapes = [];\n      const numberOfShapes = Math.floor(canvas.width * canvas.height / 50000);\n      for (let i = 0; i < numberOfShapes; i++) {\n        shapes.push(new GeometricShape());\n      }\n    };\n    const createWaves = () => {\n      waves = [new Wave(canvas.height * 0.7, 30, 0.01, 0.02, 'rgba(154, 124, 64, 0.08)'), new Wave(canvas.height * 0.8, 20, 0.015, -0.015, 'rgba(255, 255, 255, 0.05)'), new Wave(canvas.height * 0.9, 15, 0.02, 0.01, 'rgba(154, 124, 64, 0.06)')];\n    };\n    createShapes();\n    createWaves();\n    const grid = new GridLines();\n    const animate = () => {\n      const gradient = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width);\n      gradient.addColorStop(0, 'rgba(154, 124, 64, 0.02)');\n      gradient.addColorStop(1, 'rgba(33, 54, 81, 0.05)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      grid.update();\n      grid.draw();\n      waves.forEach(wave => {\n        wave.update();\n        wave.draw();\n      });\n      shapes.forEach(shape => {\n        shape.update();\n        shape.draw();\n      });\n      if (Math.random() > 0.95) {\n        ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.02})`;\n        ctx.fillRect(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 2, Math.random() * 2);\n      }\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    const handleResize = () => {\n      createShapes();\n      createWaves();\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"fixed inset-0 pointer-events-none z-0\",\n    style: {\n      background: 'transparent'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimatedBackground, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = AnimatedBackground;\nexport default AnimatedBackground;\nvar _c;\n$RefreshReg$(_c, \"AnimatedBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","AnimatedBackground","_s","canvasRef","canvas","current","ctx","getContext","animationFrameId","shapes","waves","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","GeometricShape","constructor","x","Math","random","y","size","rotation","PI","rotationSpeed","speedX","speedY","opacity","type","floor","pulsePhase","pulseSpeed","color","update","draw","save","translate","rotate","pulseFactor","sin","currentSize","fillStyle","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","rect","sides","step","i","cos","fill","stroke","restore","Wave","amplitude","frequency","speed","baseY","offset","gradient","createLinearGradient","addColorStop","GridLines","spacing","createShapes","numberOfShapes","push","createWaves","grid","animate","createRadialGradient","fillRect","forEach","wave","shape","requestAnimationFrame","handleResize","removeEventListener","cancelAnimationFrame","ref","className","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/stratscale-fixed/src/components/AnimatedBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst AnimatedBackground = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let shapes = [];\n    let waves = [];\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    class GeometricShape {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 60 + 20;\n        this.rotation = Math.random() * Math.PI * 2;\n        this.rotationSpeed = (Math.random() - 0.5) * 0.005;\n        this.speedX = (Math.random() - 0.5) * 0.3;\n        this.speedY = (Math.random() - 0.5) * 0.3;\n        this.opacity = Math.random() * 0.15 + 0.05;\n        this.type = Math.floor(Math.random() * 3);\n        this.pulsePhase = Math.random() * Math.PI * 2;\n        this.pulseSpeed = 0.01;\n        this.color = Math.random() > 0.5 ? '154, 124, 64' : '33, 54, 81';\n      }\n\n      update() {\n        this.x += this.speedX;\n        this.y += this.speedY;\n        this.rotation += this.rotationSpeed;\n        this.pulsePhase += this.pulseSpeed;\n\n        if (this.x > canvas.width + this.size) this.x = -this.size;\n        if (this.x < -this.size) this.x = canvas.width + this.size;\n        if (this.y > canvas.height + this.size) this.y = -this.size;\n        if (this.y < -this.size) this.y = canvas.height + this.size;\n      }\n\n      draw() {\n        ctx.save();\n        ctx.translate(this.x, this.y);\n        ctx.rotate(this.rotation);\n        \n        const pulseFactor = 1 + Math.sin(this.pulsePhase) * 0.1;\n        const currentSize = this.size * pulseFactor;\n\n        ctx.fillStyle = `rgba(${this.color}, ${this.opacity})`;\n        ctx.strokeStyle = `rgba(255, 255, 255, ${this.opacity * 0.3})`;\n        ctx.lineWidth = 1;\n\n        ctx.beginPath();\n        \n        switch (this.type) {\n          case 0:\n            ctx.moveTo(0, -currentSize / 2);\n            ctx.lineTo(-currentSize / 2, currentSize / 2);\n            ctx.lineTo(currentSize / 2, currentSize / 2);\n            ctx.closePath();\n            break;\n          case 1:\n            ctx.rect(-currentSize / 2, -currentSize / 2, currentSize, currentSize);\n            break;\n          case 2:\n            const sides = 6;\n            const step = (Math.PI * 2) / sides;\n            ctx.moveTo(currentSize / 2, 0);\n            for (let i = 1; i <= sides; i++) {\n              ctx.lineTo(\n                (currentSize / 2) * Math.cos(i * step),\n                (currentSize / 2) * Math.sin(i * step)\n              );\n            }\n            ctx.closePath();\n            break;\n        }\n        \n        ctx.fill();\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n\n    class Wave {\n      constructor(y, amplitude, frequency, speed, color) {\n        this.baseY = y;\n        this.amplitude = amplitude;\n        this.frequency = frequency;\n        this.speed = speed;\n        this.color = color;\n        this.offset = 0;\n      }\n\n      update() {\n        this.offset += this.speed;\n      }\n\n      draw() {\n        ctx.beginPath();\n        ctx.moveTo(0, canvas.height);\n        \n        for (let x = 0; x <= canvas.width; x += 5) {\n          const y = this.baseY + Math.sin((x * this.frequency + this.offset)) * this.amplitude;\n          ctx.lineTo(x, y);\n        }\n        \n        ctx.lineTo(canvas.width, canvas.height);\n        ctx.closePath();\n        \n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n        gradient.addColorStop(0, this.color);\n        gradient.addColorStop(1, 'rgba(33, 54, 81, 0)');\n        \n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n    }\n\n    class GridLines {\n      constructor() {\n        this.spacing = 100;\n        this.opacity = 0.03;\n        this.offset = 0;\n        this.speed = 0.2;\n      }\n\n      update() {\n        this.offset += this.speed;\n        if (this.offset >= this.spacing) this.offset = 0;\n      }\n\n      draw() {\n        ctx.strokeStyle = `rgba(154, 124, 64, ${this.opacity})`;\n        ctx.lineWidth = 0.5;\n        \n        for (let x = -this.offset; x <= canvas.width + this.spacing; x += this.spacing) {\n          ctx.beginPath();\n          ctx.moveTo(x, 0);\n          ctx.lineTo(x, canvas.height);\n          ctx.stroke();\n        }\n        \n        for (let y = -this.offset; y <= canvas.height + this.spacing; y += this.spacing) {\n          ctx.beginPath();\n          ctx.moveTo(0, y);\n          ctx.lineTo(canvas.width, y);\n          ctx.stroke();\n        }\n      }\n    }\n\n    const createShapes = () => {\n      shapes = [];\n      const numberOfShapes = Math.floor((canvas.width * canvas.height) / 50000);\n      for (let i = 0; i < numberOfShapes; i++) {\n        shapes.push(new GeometricShape());\n      }\n    };\n\n    const createWaves = () => {\n      waves = [\n        new Wave(canvas.height * 0.7, 30, 0.01, 0.02, 'rgba(154, 124, 64, 0.08)'),\n        new Wave(canvas.height * 0.8, 20, 0.015, -0.015, 'rgba(255, 255, 255, 0.05)'),\n        new Wave(canvas.height * 0.9, 15, 0.02, 0.01, 'rgba(154, 124, 64, 0.06)')\n      ];\n    };\n\n    createShapes();\n    createWaves();\n    const grid = new GridLines();\n\n    const animate = () => {\n      const gradient = ctx.createRadialGradient(\n        canvas.width / 2, canvas.height / 2, 0,\n        canvas.width / 2, canvas.height / 2, canvas.width\n      );\n      gradient.addColorStop(0, 'rgba(154, 124, 64, 0.02)');\n      gradient.addColorStop(1, 'rgba(33, 54, 81, 0.05)');\n      \n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      grid.update();\n      grid.draw();\n\n      waves.forEach(wave => {\n        wave.update();\n        wave.draw();\n      });\n\n      shapes.forEach(shape => {\n        shape.update();\n        shape.draw();\n      });\n\n      if (Math.random() > 0.95) {\n        ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.02})`;\n        ctx.fillRect(\n          Math.random() * canvas.width,\n          Math.random() * canvas.height,\n          Math.random() * 2,\n          Math.random() * 2\n        );\n      }\n\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    const handleResize = () => {\n      createShapes();\n      createWaves();\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed inset-0 pointer-events-none z-0\"\n      style={{ background: 'transparent' }}\n    />\n  );\n};\n\nexport default AnimatedBackground;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,SAAS,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMO,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IAEb,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACnC,IAAIC,gBAAgB;IACpB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,EAAE;IAEd,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzBP,MAAM,CAACQ,KAAK,GAAGC,MAAM,CAACC,UAAU;MAChCV,MAAM,CAACW,MAAM,GAAGF,MAAM,CAACG,WAAW;IACpC,CAAC;IAEDL,YAAY,CAAC,CAAC;IACdE,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAEN,YAAY,CAAC;IAE/C,MAAMO,cAAc,CAAC;MACnBC,WAAWA,CAAA,EAAG;QACZ,IAAI,CAACC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGlB,MAAM,CAACQ,KAAK;QACrC,IAAI,CAACW,CAAC,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGlB,MAAM,CAACW,MAAM;QACtC,IAAI,CAACS,IAAI,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;QACnC,IAAI,CAACG,QAAQ,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACK,EAAE,GAAG,CAAC;QAC3C,IAAI,CAACC,aAAa,GAAG,CAACN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,KAAK;QAClD,IAAI,CAACM,MAAM,GAAG,CAACP,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;QACzC,IAAI,CAACO,MAAM,GAAG,CAACR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;QACzC,IAAI,CAACQ,OAAO,GAAGT,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI;QAC1C,IAAI,CAACS,IAAI,GAAGV,IAAI,CAACW,KAAK,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,CAACW,UAAU,GAAGZ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACK,EAAE,GAAG,CAAC;QAC7C,IAAI,CAACQ,UAAU,GAAG,IAAI;QACtB,IAAI,CAACC,KAAK,GAAGd,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,cAAc,GAAG,YAAY;MAClE;MAEAc,MAAMA,CAAA,EAAG;QACP,IAAI,CAAChB,CAAC,IAAI,IAAI,CAACQ,MAAM;QACrB,IAAI,CAACL,CAAC,IAAI,IAAI,CAACM,MAAM;QACrB,IAAI,CAACJ,QAAQ,IAAI,IAAI,CAACE,aAAa;QACnC,IAAI,CAACM,UAAU,IAAI,IAAI,CAACC,UAAU;QAElC,IAAI,IAAI,CAACd,CAAC,GAAGhB,MAAM,CAACQ,KAAK,GAAG,IAAI,CAACY,IAAI,EAAE,IAAI,CAACJ,CAAC,GAAG,CAAC,IAAI,CAACI,IAAI;QAC1D,IAAI,IAAI,CAACJ,CAAC,GAAG,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACJ,CAAC,GAAGhB,MAAM,CAACQ,KAAK,GAAG,IAAI,CAACY,IAAI;QAC1D,IAAI,IAAI,CAACD,CAAC,GAAGnB,MAAM,CAACW,MAAM,GAAG,IAAI,CAACS,IAAI,EAAE,IAAI,CAACD,CAAC,GAAG,CAAC,IAAI,CAACC,IAAI;QAC3D,IAAI,IAAI,CAACD,CAAC,GAAG,CAAC,IAAI,CAACC,IAAI,EAAE,IAAI,CAACD,CAAC,GAAGnB,MAAM,CAACW,MAAM,GAAG,IAAI,CAACS,IAAI;MAC7D;MAEAa,IAAIA,CAAA,EAAG;QACL/B,GAAG,CAACgC,IAAI,CAAC,CAAC;QACVhC,GAAG,CAACiC,SAAS,CAAC,IAAI,CAACnB,CAAC,EAAE,IAAI,CAACG,CAAC,CAAC;QAC7BjB,GAAG,CAACkC,MAAM,CAAC,IAAI,CAACf,QAAQ,CAAC;QAEzB,MAAMgB,WAAW,GAAG,CAAC,GAAGpB,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACT,UAAU,CAAC,GAAG,GAAG;QACvD,MAAMU,WAAW,GAAG,IAAI,CAACnB,IAAI,GAAGiB,WAAW;QAE3CnC,GAAG,CAACsC,SAAS,GAAG,QAAQ,IAAI,CAACT,KAAK,KAAK,IAAI,CAACL,OAAO,GAAG;QACtDxB,GAAG,CAACuC,WAAW,GAAG,uBAAuB,IAAI,CAACf,OAAO,GAAG,GAAG,GAAG;QAC9DxB,GAAG,CAACwC,SAAS,GAAG,CAAC;QAEjBxC,GAAG,CAACyC,SAAS,CAAC,CAAC;QAEf,QAAQ,IAAI,CAAChB,IAAI;UACf,KAAK,CAAC;YACJzB,GAAG,CAAC0C,MAAM,CAAC,CAAC,EAAE,CAACL,WAAW,GAAG,CAAC,CAAC;YAC/BrC,GAAG,CAAC2C,MAAM,CAAC,CAACN,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAG,CAAC,CAAC;YAC7CrC,GAAG,CAAC2C,MAAM,CAACN,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAG,CAAC,CAAC;YAC5CrC,GAAG,CAAC4C,SAAS,CAAC,CAAC;YACf;UACF,KAAK,CAAC;YACJ5C,GAAG,CAAC6C,IAAI,CAAC,CAACR,WAAW,GAAG,CAAC,EAAE,CAACA,WAAW,GAAG,CAAC,EAAEA,WAAW,EAAEA,WAAW,CAAC;YACtE;UACF,KAAK,CAAC;YACJ,MAAMS,KAAK,GAAG,CAAC;YACf,MAAMC,IAAI,GAAIhC,IAAI,CAACK,EAAE,GAAG,CAAC,GAAI0B,KAAK;YAClC9C,GAAG,CAAC0C,MAAM,CAACL,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC;YAC9B,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,KAAK,EAAEE,CAAC,EAAE,EAAE;cAC/BhD,GAAG,CAAC2C,MAAM,CACPN,WAAW,GAAG,CAAC,GAAItB,IAAI,CAACkC,GAAG,CAACD,CAAC,GAAGD,IAAI,CAAC,EACrCV,WAAW,GAAG,CAAC,GAAItB,IAAI,CAACqB,GAAG,CAACY,CAAC,GAAGD,IAAI,CACvC,CAAC;YACH;YACA/C,GAAG,CAAC4C,SAAS,CAAC,CAAC;YACf;QACJ;QAEA5C,GAAG,CAACkD,IAAI,CAAC,CAAC;QACVlD,GAAG,CAACmD,MAAM,CAAC,CAAC;QACZnD,GAAG,CAACoD,OAAO,CAAC,CAAC;MACf;IACF;IAEA,MAAMC,IAAI,CAAC;MACTxC,WAAWA,CAACI,CAAC,EAAEqC,SAAS,EAAEC,SAAS,EAAEC,KAAK,EAAE3B,KAAK,EAAE;QACjD,IAAI,CAAC4B,KAAK,GAAGxC,CAAC;QACd,IAAI,CAACqC,SAAS,GAAGA,SAAS;QAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;QAC1B,IAAI,CAACC,KAAK,GAAGA,KAAK;QAClB,IAAI,CAAC3B,KAAK,GAAGA,KAAK;QAClB,IAAI,CAAC6B,MAAM,GAAG,CAAC;MACjB;MAEA5B,MAAMA,CAAA,EAAG;QACP,IAAI,CAAC4B,MAAM,IAAI,IAAI,CAACF,KAAK;MAC3B;MAEAzB,IAAIA,CAAA,EAAG;QACL/B,GAAG,CAACyC,SAAS,CAAC,CAAC;QACfzC,GAAG,CAAC0C,MAAM,CAAC,CAAC,EAAE5C,MAAM,CAACW,MAAM,CAAC;QAE5B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIhB,MAAM,CAACQ,KAAK,EAAEQ,CAAC,IAAI,CAAC,EAAE;UACzC,MAAMG,CAAC,GAAG,IAAI,CAACwC,KAAK,GAAG1C,IAAI,CAACqB,GAAG,CAAEtB,CAAC,GAAG,IAAI,CAACyC,SAAS,GAAG,IAAI,CAACG,MAAO,CAAC,GAAG,IAAI,CAACJ,SAAS;UACpFtD,GAAG,CAAC2C,MAAM,CAAC7B,CAAC,EAAEG,CAAC,CAAC;QAClB;QAEAjB,GAAG,CAAC2C,MAAM,CAAC7C,MAAM,CAACQ,KAAK,EAAER,MAAM,CAACW,MAAM,CAAC;QACvCT,GAAG,CAAC4C,SAAS,CAAC,CAAC;QAEf,MAAMe,QAAQ,GAAG3D,GAAG,CAAC4D,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE9D,MAAM,CAACW,MAAM,CAAC;QACjEkD,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,IAAI,CAAChC,KAAK,CAAC;QACpC8B,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,qBAAqB,CAAC;QAE/C7D,GAAG,CAACsC,SAAS,GAAGqB,QAAQ;QACxB3D,GAAG,CAACkD,IAAI,CAAC,CAAC;MACZ;IACF;IAEA,MAAMY,SAAS,CAAC;MACdjD,WAAWA,CAAA,EAAG;QACZ,IAAI,CAACkD,OAAO,GAAG,GAAG;QAClB,IAAI,CAACvC,OAAO,GAAG,IAAI;QACnB,IAAI,CAACkC,MAAM,GAAG,CAAC;QACf,IAAI,CAACF,KAAK,GAAG,GAAG;MAClB;MAEA1B,MAAMA,CAAA,EAAG;QACP,IAAI,CAAC4B,MAAM,IAAI,IAAI,CAACF,KAAK;QACzB,IAAI,IAAI,CAACE,MAAM,IAAI,IAAI,CAACK,OAAO,EAAE,IAAI,CAACL,MAAM,GAAG,CAAC;MAClD;MAEA3B,IAAIA,CAAA,EAAG;QACL/B,GAAG,CAACuC,WAAW,GAAG,sBAAsB,IAAI,CAACf,OAAO,GAAG;QACvDxB,GAAG,CAACwC,SAAS,GAAG,GAAG;QAEnB,KAAK,IAAI1B,CAAC,GAAG,CAAC,IAAI,CAAC4C,MAAM,EAAE5C,CAAC,IAAIhB,MAAM,CAACQ,KAAK,GAAG,IAAI,CAACyD,OAAO,EAAEjD,CAAC,IAAI,IAAI,CAACiD,OAAO,EAAE;UAC9E/D,GAAG,CAACyC,SAAS,CAAC,CAAC;UACfzC,GAAG,CAAC0C,MAAM,CAAC5B,CAAC,EAAE,CAAC,CAAC;UAChBd,GAAG,CAAC2C,MAAM,CAAC7B,CAAC,EAAEhB,MAAM,CAACW,MAAM,CAAC;UAC5BT,GAAG,CAACmD,MAAM,CAAC,CAAC;QACd;QAEA,KAAK,IAAIlC,CAAC,GAAG,CAAC,IAAI,CAACyC,MAAM,EAAEzC,CAAC,IAAInB,MAAM,CAACW,MAAM,GAAG,IAAI,CAACsD,OAAO,EAAE9C,CAAC,IAAI,IAAI,CAAC8C,OAAO,EAAE;UAC/E/D,GAAG,CAACyC,SAAS,CAAC,CAAC;UACfzC,GAAG,CAAC0C,MAAM,CAAC,CAAC,EAAEzB,CAAC,CAAC;UAChBjB,GAAG,CAAC2C,MAAM,CAAC7C,MAAM,CAACQ,KAAK,EAAEW,CAAC,CAAC;UAC3BjB,GAAG,CAACmD,MAAM,CAAC,CAAC;QACd;MACF;IACF;IAEA,MAAMa,YAAY,GAAGA,CAAA,KAAM;MACzB7D,MAAM,GAAG,EAAE;MACX,MAAM8D,cAAc,GAAGlD,IAAI,CAACW,KAAK,CAAE5B,MAAM,CAACQ,KAAK,GAAGR,MAAM,CAACW,MAAM,GAAI,KAAK,CAAC;MACzE,KAAK,IAAIuC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,cAAc,EAAEjB,CAAC,EAAE,EAAE;QACvC7C,MAAM,CAAC+D,IAAI,CAAC,IAAItD,cAAc,CAAC,CAAC,CAAC;MACnC;IACF,CAAC;IAED,MAAMuD,WAAW,GAAGA,CAAA,KAAM;MACxB/D,KAAK,GAAG,CACN,IAAIiD,IAAI,CAACvD,MAAM,CAACW,MAAM,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,0BAA0B,CAAC,EACzE,IAAI4C,IAAI,CAACvD,MAAM,CAACW,MAAM,GAAG,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,KAAK,EAAE,2BAA2B,CAAC,EAC7E,IAAI4C,IAAI,CAACvD,MAAM,CAACW,MAAM,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,0BAA0B,CAAC,CAC1E;IACH,CAAC;IAEDuD,YAAY,CAAC,CAAC;IACdG,WAAW,CAAC,CAAC;IACb,MAAMC,IAAI,GAAG,IAAIN,SAAS,CAAC,CAAC;IAE5B,MAAMO,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMV,QAAQ,GAAG3D,GAAG,CAACsE,oBAAoB,CACvCxE,MAAM,CAACQ,KAAK,GAAG,CAAC,EAAER,MAAM,CAACW,MAAM,GAAG,CAAC,EAAE,CAAC,EACtCX,MAAM,CAACQ,KAAK,GAAG,CAAC,EAAER,MAAM,CAACW,MAAM,GAAG,CAAC,EAAEX,MAAM,CAACQ,KAC9C,CAAC;MACDqD,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,0BAA0B,CAAC;MACpDF,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE,wBAAwB,CAAC;MAElD7D,GAAG,CAACsC,SAAS,GAAGqB,QAAQ;MACxB3D,GAAG,CAACuE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEzE,MAAM,CAACQ,KAAK,EAAER,MAAM,CAACW,MAAM,CAAC;MAE/C2D,IAAI,CAACtC,MAAM,CAAC,CAAC;MACbsC,IAAI,CAACrC,IAAI,CAAC,CAAC;MAEX3B,KAAK,CAACoE,OAAO,CAACC,IAAI,IAAI;QACpBA,IAAI,CAAC3C,MAAM,CAAC,CAAC;QACb2C,IAAI,CAAC1C,IAAI,CAAC,CAAC;MACb,CAAC,CAAC;MAEF5B,MAAM,CAACqE,OAAO,CAACE,KAAK,IAAI;QACtBA,KAAK,CAAC5C,MAAM,CAAC,CAAC;QACd4C,KAAK,CAAC3C,IAAI,CAAC,CAAC;MACd,CAAC,CAAC;MAEF,IAAIhB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE;QACxBhB,GAAG,CAACsC,SAAS,GAAG,uBAAuBvB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG;QAC9DhB,GAAG,CAACuE,QAAQ,CACVxD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGlB,MAAM,CAACQ,KAAK,EAC5BS,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGlB,MAAM,CAACW,MAAM,EAC7BM,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,EACjBD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAClB,CAAC;MACH;MAEAd,gBAAgB,GAAGyE,qBAAqB,CAACN,OAAO,CAAC;IACnD,CAAC;IAEDA,OAAO,CAAC,CAAC;IAET,MAAMO,YAAY,GAAGA,CAAA,KAAM;MACzBZ,YAAY,CAAC,CAAC;MACdG,WAAW,CAAC,CAAC;IACf,CAAC;IAED5D,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAEiE,YAAY,CAAC;IAE/C,OAAO,MAAM;MACXrE,MAAM,CAACsE,mBAAmB,CAAC,QAAQ,EAAExE,YAAY,CAAC;MAClDE,MAAM,CAACsE,mBAAmB,CAAC,QAAQ,EAAED,YAAY,CAAC;MAClDE,oBAAoB,CAAC5E,gBAAgB,CAAC;IACxC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IACEqF,GAAG,EAAElF,SAAU;IACfmF,SAAS,EAAC,uCAAuC;IACjDC,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAc;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEN,CAAC;AAAC1F,EAAA,CAhPID,kBAAkB;AAAA4F,EAAA,GAAlB5F,kBAAkB;AAkPxB,eAAeA,kBAAkB;AAAC,IAAA4F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}